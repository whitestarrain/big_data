"================leader start==================
let mapleader="\<space>"

"================leader end==================



"================plug start==================

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('D:\learn\vim\vim82\autoload')

"markdonw 语法高亮
Plug 'plasticboy/vim-markdown'

" 主题
Plug 'w0ng/vim-hybrid'

" 下方提示栏
Plug 'vim-airline/vim-airline'
" 下方提示栏主题
Plug 'vim-airline/vim-airline-themes'
" 增加缩进线
Plug 'yggdroot/indentline'
" 开始菜单
Plug 'mhinz/vim-startify'

" 文件树
Plug 'scrooloose/nerdtree'

" 单文件模糊搜索跳转
Plug 'ctrlpvim/ctrlp.vim'

" 位置跳转
Plug 'easymotion/vim-easymotion'

" 成对编辑
Plug 'tpope/vim-surround'

" 多文件模糊搜索
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

"多文件搜索替换
Plug 'brooth/far.vim'

" python插件
" Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

" 代码大纲
" Plug 'majutsushi/tagbar'

" 粘贴图片
Plug 'ferrine/md-img-paste.vim'


"括号补全
Plug 'jiangmiao/auto-pairs'


" java补全方案

call plug#end()


"================plug end==================


"================plugConfig start==================

" vim-markdown config
" 禁用折叠
let g:vim_markdown_folding_disabled=1
" 禁用插件按键映射
let g:vim_markdown_no_default_key_mappings = 1
  " gx: 在浏览器中打开光标所在处的链接
  " ge: 在 Vim 中打开光标下的链接指向的文件。主要用于打开使用相对位置标识的 markdown 文件
  " ]]: 跳转到下一个 header
  " [[: 跳转到之前的 header，与 ]c 相反
  " ][: 跳转到下一个兄弟 header
  " []: 跳转到上一个兄弟 header
  " ]c: 跳转到当前文本所属的 header
  " ]u: 跳转到"父"header
" 语法隐藏相关
set conceallevel=2
let g:vim_markdown_conceal=0
" 开启math公式高亮
let g:vim_markdown_math = 1
" 修改缩进格数量
let g:vim_markdown_list_item_indent = 2



" vim-airline config

let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='bubblegum'
set laststatus=2  "永远显示状态栏



" NERDTree config

" auto turn on
" autocmd vimenter * NERDTree
" ctrl+n to toggle file tree
noremap <leader>n :NERDTreeToggle<CR>
" ignore file
let NERDTreeIgnore=[
    \ '\.pyc$','\~$','\.swp','\.git$','\.pyo$','\.svn$','\.swp$','__pycache__'
    \ ]
nnoremap <leader>v :NERDTreeFind<cr>
" and ctrl w p  to back


" 跳转到开始菜单
nnoremap <leader>st :Startify<cr>


" ctrlp config

let g:ctrlp_map = '<leader>fa'
" 不能搜索下层文件
" 选择文件后 ,v 来定位


" easymotion config

nmap <leader>j <Plug>(easymotion-s2)
" acejump
" 其中<leader><leader>{j|k|w|b}，可以快速跳转行和列


" tagbar config
" 设置快速开关大纲
" nnoremap ,t :TagbarToggle<CR>



"粘贴图片配置
autocmd FileType markdown nmap <buffer><silent> <leader>m :call mdip#MarkdownClipboardImage()<CR>
autocmd FileType md nmap <buffer><silent> <leader>m :call mdip#MarkdownClipboardImage()<CR>
let g:mdip_imgdir = './image'

" python 插件配置
" let g:python3_host_prog='D:/learn/anaconda3/envs/learn/python.exe'



" java补全方案

"================plugConfig end==================



"================config start==================

"----------------------------------------------------------------
"编码设置 linux上不用写
"----------------------------------------------------------------
"Vim 在与屏幕/键盘交互时使用的编码(取决于实际的终端的设定)        
set encoding=utf-8
set langmenu=zh_CN.UTF-8
" 设置打开文件的编码格式  
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 
set fileencoding=utf-8
"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"解决consle输出乱码
"set termencoding = cp936  
"设置中文提示
language messages zh_CN.utf-8 
"设置中文帮助
set helplang=cn
"设置为双字宽显示，否则无法完整显示如:☆
set ambiwidth=double




set nocompatible

set number              " 设置行号

filetype plugin indent on  " Load plugins according to detected filetype.
filetype on                " 开启文档类型检查
syntax on                  " 设置代码高亮 

set autoindent             " 设置自动缩进
set expandtab              " Use spaces instead of tabs.
set shiftround             " >> indents to next multiple of 'shiftwidth'.

set backspace   =indent,eol,start  " Make backspace work as you would expect.
set hidden                 " Switch between buffers without having to save first.
set laststatus  =2         " Always show statusline.
set display     =lastline  " Show as much as possible of the last line.

set showmode               " Show current mode in command-line.
set showcmd                " Show already typed keys when more are expected.

set incsearch              " 设置增量搜索
set hlsearch               " 设置搜索高亮

set ttyfast                " Faster redrawing.
set lazyredraw             " Only redraw when necessary.

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

set cursorline             " Find the current line quickly.
set wrapscan               " Searches wrap around end-of-file.
set report      =0         " Always report changed lines.
set synmaxcol   =200       " Only highlight the first 200 columns.


" vim 默认在插入模式关闭输入法，可以修改 iminsert 选项来开启。
set iminsert=2
"'iminsert' 'imi' 默认为 0，如果支持输入方法则为 2。指定插入模式里使用 :lmap 还是输入方法 (IM)。
"合法的值是:
"0 :lmap 关闭而 IM 关闭
"1 :lmap 打开而 IM 关闭
"2 :lmap 关闭而 IM 打开
"插入模式下使用 CTRL-^ 时此选项也发生改变。



"[输入法智能切换设置] 8.2以后不需要了
"一些必要的设置,比如是什么按键切换中英文状态.如果加入"imcmdline"选项则命令模式下输入法默认为被开启.
" set imak=S imi=2 ims=2
"VIM启动/切换窗口焦点/离开编辑模式时,禁用输入法
" autocmd VimEnter,FocusLost * set imdisable
"获得焦点/进入编辑模式时,启用输入法
" autocmd FocusGained,InsertEnter * set noimdisable



" 设置启动位置
winpos 300 80
" 设置窗口大小
set lines=40 columns=100

" 设置字体大小
"set guifont=Courier:h14
set guifont=Lucida_Console:h11:cANSI

" F2进入粘贴模式
set pastetoggle=<F2>

" 设置折叠方式
set foldmethod=indent


set scrolloff=15


set backspace=indent,eol,start

" 设置一个tab的空格长度
set tabstop=2

"softtabstop 表示在编辑模式的时候按退格键的时候退回缩进的长度，当使用 expandtab时特别有用。
set softtabstop=2

"shiftwidth 表示每一级缩进的长度，一般设置成跟 softtabstop 一样。
set shiftwidth=2

"当设置成 expandtab 时，缩进用空格来表示，noexpandtab 则是用制表符表示一个缩进。
set expandtab

" 去掉菜单栏
set go=

" 主题
colorscheme hybrid

" 行距
set linespace=6

" 自动全屏
if has('gui_running') && has("win32")
    au GUIEnter * simalt ~x
endif




" 不同的文件显示不同的缩进
autocmd Filetype html setlocal ts=2 sw=2 expandtab
autocmd Filetype md setlocal ts=2 sw=2 expandtab
autocmd Filetype markdown setlocal ts=2 sw=2 expandtab
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
autocmd Filetype javascript setlocal ts=4 sw=4 sts=0 expandtab
autocmd Filetype java setlocal ts=4 sw=4 sts=0 expandtab
autocmd Filetype coffeescript setlocal ts=4 sw=4 sts=0 expandtab





set foldlevelstart=99       " 打开文件是默认不折叠代码


set vb t_vb=
au GuiEnter * set t_vb=


" 初始启动位置
:cd d:\

"================config end==================



"================map start==================


" 设置插入模式下括号等自动补全。
"inoremap ' ''<ESC>i
"inoremap " ""<ESC>i
"inoremap ( ()<ESC>i
"inoremap [ []<ESC>i
"inoremap { {<CR>}<ESC>O


" 设置插入模式下光标左右移动方式
inoremap <C-l> <Right>
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>



" 设置jk返回normal模式
inoremap jk <Esc>


" 分屏移动映射
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l


" 设置缓冲区跳转
noremap <M-h> :bf<cr>
noremap <M-l> :bn<cr>


nnoremap > >>
nnoremap < <<

"设置路径为当前文件所在路径
noremap <silent><leader>p :cd %:h<cr>

"================map end==================







" 不知道干啥的
"set list                   " Show non-printable characters.
"if has('multi_byte') && &encoding ==# 'utf-8'
"  let &listchars = 'tab:? ,extends:?,precedes:?,nbsp:锟斤拷'
"else
"  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
"endif
"
"" The fish shell is not very compatible to other shells and unexpectedly
"" breaks things that use 'shell'.
"if &shell =~# 'fish$'
"  set shell=/bin/bash
"endif
"


